library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("ggplot2")
remove.packages("GGally")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("GGally")
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
-3--5
library(bbmle)
library(ggplot2)
library(plyr)
priorPreg <- c (2, 7, 5, 0, 0, 3, 0, 4, 10)
censored  <- c (0, 0, 0, 0, 0, 0, 0, 0, 1 )
# p <- 1/mean(priorPreg + 1)
data <- data.frame(priorPreg, censored)
preg.in.month.log.L <- function(p, data, negll=FALSE) { # PUT PARAMETER AS FIRST ARGUMENT
# Negative Binomial independent sampling [do not do coding yourself]
expOne <- sum( (data[,2]==0)*(data[,1] * log(1-p) + log(p)))
expTwo <- sum( (data[,2]==1)*(data[,1]* log(1-p)))
res <- expOne + expTwo
if(negll){res <- -res}
return(res)
}
preg.in.month.log.L (.2, data, negll=TRUE)
nrow(data)
str(data)
plotdata<-NULL
## 3 Use a function from the plyr package to compute the log-likelihood between
## 0 and 0.5 in steps of .01 and plot the log-likelihood function
plotdata<-data.frame(p<-seq(0, 0.5, 0.01))
str(plotdata)
plotdata$logL <- laply(plotdata$p, preg.in.month.log.L, data=data)
head(plotdata$logL)
pguess <- 0.15
mymle       <- optim(pguess, preg.in.month.log.L, data=data, negll=TRUE, hessian=TRUE)
mymle
se <- sqrt(1/mymle$hessian)
se
preg.in.month.log.L (0.2051017, data)
plot <- ggplot(data=plotdata, aes(x=p, y=logL))+
geom_line()
plot.mle <- ggplot(data=plotdata, aes(x=p, y=logL))+
ggtitle("Maximum likelihood of conceiving through optimization")+
geom_line()+
geom_point(aes(x=mymle$par, y=-mymle$value), size=4, shape=2)+
scale_shape_identity()
plot.mle
## Use the nlm() function to find the MLE
nlm.preg <- nlm(preg.in.month.log.L, pguess, data = data, negll=TRUE, hessian=TRUE)
nlm.preg
se.nlm  <- sqrt(1/nlm.preg$hessian)
mle.nlm <- nlm.preg$estimate
mle.nlm.Y <- preg.in.month.log.L (mle.nlm, data)
#Getting the Ys coresponding to the log of LCL and UCL
ucl.nlm <- mle.nlm + qnorm(0.975) * se.nlm
ucl.nlm.Y <- preg.in.month.log.L (ucl.nlm, data)
lcl.nlm <- mle.nlm - qnorm(0.975) * se.nlm
lcl.nlm.Y <- preg.in.month.log.L (lcl.nlm, data)
## 5 Add the MLE to the previous plot by plotting a filled circle at the maximum
## of the likelihood and the returned MLE.
plot.nlm <- plot + geom_point(data=plotdata, mapping=aes(x=mle.nlm, y= mle.nlm.Y, colour="red",shape=21),size=4)+
geom_point(data=plotdata, mapping=aes(x= ucl.nlm, y = ucl.nlm.Y, color ="red",shape=21),size=4)+
geom_point(data=plotdata, mapping=aes(x=lcl.nlm, y = lcl.nlm.Y, color ="red",shape=21),size=4) +
scale_shape_identity()
plot.nlm.anno <- plot.nlm +annotate('text', x = c(0.05,0.2,0.4), y = c(-22,-18.5,-20), label=c("LCL","MLE","UCL"),
size= c(4,4,4),colour="red")+
annotate('text', x = c(0.05,0.2,0.4), y = c(-20.5,-17,-18.8), label=round(c(lcl.nlm, mle.nlm, ucl.nlm), digits=2),
size= c(4,4,4),colour="red")
plot.nlm.anno
## 9 Load the bbmle package and repeat the optimization using the mle2()
mle2.preg <- mle2(preg.in.month.log.L, list(p = pguess ), data= list(data = data, negll=TRUE))
mle.bbl.preg <- coef(mle2.preg)
mle.bbl.Y <- preg.in.month.log.L (mle.bbl.preg, data)
CI <- confint(mle2.preg)
ucl.mle2.Y <- preg.in.month.log.L (CI[2], data)
lcl.mle2.Y <- preg.in.month.log.L (CI[1], data)
se.mle2 <- sqrt(diag(vcov(mle2.preg)))
plot.mle2 <- plot.nlm.anno + geom_point(data=plotdata, mapping=aes(x=coef(mle2.preg), y= mle.bbl.Y, colour="blue", shape=21),size=2)+
geom_point(data=plotdata, mapping=aes(x= confint(mle2.preg)[2], y = ucl.mle2.Y, color ="blue", shape=21), size=4)+
geom_point(data=plotdata, mapping=aes(x= confint(mle2.preg)[1], y = lcl.mle2.Y, color ="blue", shape=21), size=4)+
ggtitle("MLE of conceiving with 95% \nCI using NLM and BBMLE ")
plot.mle2
library(xlsx)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
dataNow <- download.file(fileURL,dest="quiz.csv",method="curl")
ready   <- read.csv("quiz.csv",header=TRUE)
View(ready)
ready   <- read.csv("quiz.csv",header=TRUE,stringAsFactors=FALSE)
ready   <- read.csv("quiz.csv",header=TRUE,StringAsFactors=FALSE)
ready   <- read.csv("quiz.csv",header=TRUE)
table(ready$FES)
table(ready$FES %in 24)
ready   <- read.csv("quiz.csv",header=TRUE)
number <- subset(ready, ready$VAL %in% 24)
table(ready$FES %in% 24)
table(number)
length(number)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
second <- download.file(fileURL,dest="quiz2.xlsx",method="curl")
dat<-  read.xlsx("quiz2.xlsx",sheetIndex=1,startRow=18,endRow=23,startCol=7,endCol=15,header=TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
library(RCurl)
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
second <- download.file(fileURL,dest="quiz3.xml",method="curl")
data <- xmlTreeParse(fileURL)
rootNode <- xmlRoot(data)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
nodes <- getNodeSet(rootNode,"//row/zipcode")
string <- lapply(nodes,function(x) xmlSApply(x,xmlValue))
table(string %in% 21231)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
dataNow <- download.file(fileURL,dest="quiz5.csv",method="curl")
dataNow <- download.file(fileURL,dest="quiz5.csv",method="curl")
DT <- fread(dataNow)
library(data.table)
DT <- fread(dataNow)
DT <- fread(quiz5.csv)
DT <- fread("quiz5.csv")
View(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==2])
DT$pwgtp15,by=DT$SEX
mean(DT$pwgtp15,by=DT$SEX
)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT$pwgtp15,by=DT$SEX)
0.001>0.002
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- xmlTreeParse(fileURL)
rootNode <- xmlRoot(data)
nodes <- getNodeSet(rootNode,"//row/zipcode")
string <- lapply(nodes,function(x) xmlSApply(x,xmlValue))
table(string %in% 21231)
install.packages("RMySQL")
sp <- c("dog","dog","dog","cat","cat","cat","cat","cat","dog","bird","bird",
"bird","rabb","rabb","rabb","rabb")
blah <- c(rep("dog",each=3),rep("cat",each=5),"dog",rep("bird",each=3),rep("rabb",each=4))
rd <- c("uniq","uniq","for","uniq","uniq","mains","mains","mains",
"for","mac","mac","mac","lol","lol","lol","lol")
pH <- c(4.5,4.2,6.1,7.0,4.9,3.1,6.5,6.5,NA,5.0,4.1,5.1,5.0,4.2,6.0,2.8)
abund <- c(5,5,3,8,5,9,1,3,2,3,5,NA,8,5,2,3)
area <- c(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2)
point <- c("a","a","a","a","a","b","b","b","a","a","a","a","b","b","b","b")
df <- data.frame(sp,rd,pH,abund,area,point)
df$group <- apply(df[,cols],1,paste,collapse="")
cols <-c("area","point")
df$group <- apply(df[,cols],1,paste,collapse="")
df1a    <- df[grepl("1a",df$group),]
View(df1a)
head(df)
df
df1a
x <- "this.is.fairly//Whatit.is/path/InbeginUntilhere7/seenit"
str <- regmatches(x, gregexpr("^I.*7$", x))
st
str
striiiing <- regmatches(x, gregexpr("^I.*7$", x))
striiiing
library(data.table)
setwd("/Users/Saida/DataScience/Project")
subjectTrain    <- fread("subject_train.txt")
subjectTest     <- fread("subject_test.txt")
xTrain          <- fread("X_train.txt")
xTest           <- fread("X_test.txt")
yTrain          <- fread("Y_train.txt")
yTest           <- fread("Y_test.txt")
subjectTrainTest <- rbind (subjectTrain, subjectTest)
setnames (subjectTrainTest, "V1", "subject")
activityTrainTest      <- rbind (yTrain, yTest)
setnames(activityTrainTest, "V1", "activityNum")
dim(activityTrainTest)
observationTrainTest   <- rbind(xTrain, xTest)
dim(observationTrainTest)
subjectDT <- cbind (subjectTrainTest,activityTrainTest)
all       <- cbind (subjectDT,observationTrainTest)
dim(all)
setkey(all, subject, activityNum)
features <- fread("features.txt")
setnames(features, names(features), c("featureNum", "featureName"))
featureMeanSTD <- features[grepl("mean\\(\\)|std\\(\\)", featureName)]
featureMeanSTD$featureCode <- featureMeanSTD[, paste0("V", featureNum)]
head(featureMeanSTD)
activityLabel <- fread("activity_labels.txt")
setnames(activityLabel, names(activityLabel), c("activityNum", "activityName"))
all           <- merge(all, activityLabel, by = "activityNum", all.x = TRUE)
dim(all)
setkey(all, subject, activityNum, activityName)
narrowAll <- data.table(melt(all, key(all), variable.name = "featureCode"))
narrowAll <- merge(narrowAll, featureMeanSTD[, list(featureNum, featureCode, featureName)], by = "featureCode",
all.x = TRUE)
str(narrowAll$featureName)
narrowAll$featDomain <- factor(ifelse(grepl("^t",narrowAll$featureName),"Time","Freq"))
narrowAll$featInstrument <- factor (ifelse( grepl("Acc",narrowAll$featureName),"Accelerometer",
ifelse(grepl("Gyro",narrowAll$featureName),"Gyroscope", NA)))
table(narrowAll$featInstrument)
narrowAll$featAcceleration <- factor (ifelse( grepl("BodyAcc",narrowAll$featureName),"Body",
ifelse(grepl("GravityAcc",narrowAll$featureName),"Gravity", NA)))
narrowAll$featVariable <- factor (ifelse( grepl("std()",narrowAll$featureName),"STD",
ifelse(grepl("mean()",narrowAll$featureName),"mean", NA)))
narrowAll$featAxis     <- factor (ifelse( grepl("-X",narrowAll$featureName),"X",
ifelse(grepl("-Y",narrowAll$featureName),"Y",
ifelse(grepl("-Z",narrowAll$featureName),"Z", NA))))
table(narrowAll$featAxis)
first  <- nrow(narrowAll[, .N, by = c("featureName")])
second <- nrow(narrowAll[, .N, by = c("featDomain", "featAcceleration", "featInstrument",
"featJerk", "featMagnitude", "featVariable", "featAxis")])
narrowAll$featJerk      <- as.factor( ifelse(grepl ("Jerk",narrowAll$featureName),"Jerk",NA))
second <- nrow(narrowAll[, .N, by = c("featDomain", "featAcceleration", "featInstrument",
"featJerk", "featMagnitude", "featVariable", "featAxis")])
narrowAll$featMagnitude <- as.factor( ifelse(grepl ("Mag",narrowAll$featureName), "Magnitude",NA))
second <- nrow(narrowAll[, .N, by = c("featDomain", "featAcceleration", "featInstrument",
"featJerk", "featMagnitude", "featVariable", "featAxis")])
first %in% second
write.table(narrowAll,"tidySet.txt")
dim(narrowAll)
tidySet <- tapply(split(c("featDomain", "featAcceleration", "featInstrument",
"featJerk", "featMagnitude", "featVariable", "featAxis")),mean,na.rm=TRUE)
tidySet <- tapply(split(narrowAll,c("featDomain", "featAcceleration", "featInstrument",
"featJerk", "featMagnitude", "featVariable", "featAxis")),mean,na.rm=TRUE)
names(narrowAll)
setkey(narrowAll, subject, activityName, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
tidyData <- narrowAll[, list(count = .N, average = mean(value)), by=key(narrowAll)]
head(tidyData)
write.table(tidyData,"tidyData.txt")
View(tidyData)
library(memisc)
install.packages("memisc")
library(memisc)
codebook(tidyData)
?knit
knit("codebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
library(knitr)
knit("codebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
knit("makeCodebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
knit("makeCodebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
tidyData <- data.frame(tidyData)
codebook(tidyData)
summary(tidyData)
?wording
head(tidyData)
tidyData <- within(tidyData,{
description(subject)         <- "ID of the subject performing the activity for each window sample (range is from 1 to 30)"
description(activityName)    <- "Name of the Activity"
description(featDomain)      <- "Feature: Time domain signal or frequency domain signal (Time or Freq)"
descrition(featAcceleration) <- "Feature: Acceleration signal Body or Gravity"
descrition(featInstrument)   <- "Feature: Instrument of measurement Accelerometer or Gyroscope"
descrition(featJerk)         <- "Feature: Jerk signal"
descrition(featMagnitude)    <- "Feature: Magnitude of the signals calculated using the Euclidean norm"
descrition(featVariable)     <- "Feature: Variable (Mean or SD)"
descrition(featAxis)         <- "Feature: Axis of the signal X, Y and Z plane (X, Y, or Z)"
description(average)         <- "Feature: Average of each variable for each feature and subject"
})
tidyData <- within(tidyData,{
description(subject)         <- "ID of the subject performing the activity for each window sample (range is from 1 to 30)"
description(activityName)    <- "Name of the Activity"
description(featDomain)      <- "Feature: Time domain signal or frequency domain signal (Time or Freq)"
description(featAcceleration) <- "Feature: Acceleration signal Body or Gravity"
description(featInstrument)   <- "Feature: Instrument of measurement Accelerometer or Gyroscope"
description(featJerk)         <- "Feature: Jerk signal"
description(featMagnitude)    <- "Feature: Magnitude of the signals calculated using the Euclidean norm"
description(featVariable)     <- "Feature: Variable (Mean or SD)"
description(featAxis)         <- "Feature: Axis of the signal X, Y and Z plane (X, Y, or Z)"
description(average)         <- "Feature: Average of each variable for each feature and subject"
})
codebook(tidyData)
View(tidyData)
str(tidyData)
tidyData <- data.set(tidyData)
tidyData <- within(tidyData,{
description(subject)         <- "ID of the subject performing the activity for each window sample (range is from 1 to 30)"
description(activityName)    <- "Name of the Activity"
description(featDomain)      <- "Feature: Time domain signal or frequency domain signal (Time or Freq)"
description(featAcceleration) <- "Feature: Acceleration signal Body or Gravity"
description(featInstrument)   <- "Feature: Instrument of measurement Accelerometer or Gyroscope"
description(featJerk)         <- "Feature: Jerk signal"
description(featMagnitude)    <- "Feature: Magnitude of the signals calculated using the Euclidean norm"
description(featVariable)     <- "Feature: Variable (Mean or SD)"
description(featAxis)         <- "Feature: Axis of the signal X, Y and Z plane (X, Y, or Z)"
description(average)         <- "Feature: Average of each variable for each feature and subject"
})
tidyData <- narrowAll[, list(count = .N, average = mean(value)), by=key(narrowAll)]
head(tidyData)
tidyData <- data.set(tidyData)
tidyData <- within(tidyData,{
description(subject)         <- "ID of the subject performing the activity for each window sample (range is from 1 to 30)"
description(activityName)    <- "Name of the Activity"
description(featDomain)      <- "Feature: Time domain signal or frequency domain signal (Time or Freq)"
description(featAcceleration) <- "Feature: Acceleration signal Body or Gravity"
description(featInstrument)   <- "Feature: Instrument of measurement Accelerometer or Gyroscope"
description(featJerk)         <- "Feature: Jerk signal"
description(featMagnitude)    <- "Feature: Magnitude of the signals calculated using the Euclidean norm"
description(featVariable)     <- "Feature: Variable (Mean or SD)"
description(featAxis)         <- "Feature: Axis of the signal X, Y and Z plane (X, Y, or Z)"
description(average)         <- "Feature: Average of each variable for each feature and subject"
})
str(tidyData)
tidyData <- within(tidyData,{
description(tidyData.subject)         <- "ID of the subject performing the activity for each window sample (range is from 1 to 30)"
description(tidyData.activityName)    <- "Name of the Activity"
description(tidyData.featDomain)      <- "Feature: Time domain signal or frequency domain signal (Time or Freq)"
description(tidyData.featAcceleration) <- "Feature: Acceleration signal Body or Gravity"
description(tidyData.featInstrument)   <- "Feature: Instrument of measurement Accelerometer or Gyroscope"
description(tidyData.featJerk)         <- "Feature: Jerk signal"
description(tidyData.featMagnitude)    <- "Feature: Magnitude of the signals calculated using the Euclidean norm"
description(tidyData.featVariable)     <- "Feature: Variable (Mean or SD)"
description(tidyData.featAxis)         <- "Feature: Axis of the signal X, Y and Z plane (X, Y, or Z)"
description(tidyData.average)         <- "Feature: Average of each variable for each feature and subject"
})
codebook(tidyData)
targetCodebookFilePath <- "./CodeBook.md"
file.remove(targetCodebookFilePath)
